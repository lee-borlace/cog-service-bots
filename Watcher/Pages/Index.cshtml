@page
@model IndexModel
@{
    ViewData["Title"] = "Watcher";
}

<video class="videostream" autoplay></video>
<img id="sourceImage" />

<div id="analysisResult"></div>

<script>

        (async function () {

            const constraints = {
                video: {
                    width: { exact: 640 },
                    height: { exact: 480 }
                }
            };

            let webWorkerAnalysis;
            let lastObservation = null;
            let currentObservation = null;

            handleWebWorkerMessage = async function (event) {
                webWorkerAnalysis.terminate();

                console.log(event.data);

                // Track previous and current observation.
                lastObservation = currentObservation;
                currentObservation = event.data;

                // When the analysis result comes back, get the latest commentary and re-trigger the next round of analysis.
                await getCommentary();

                await processImage();
            }

            getCommentary = async function () {

                var apiResult = await fetch(
                    '/api/imageAnalysis/commentary',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json",
                        },
                        //body: [lastObservation, currentObservation]
                        body: currentObservation
                    });

                var textResult = await apiResult.text();

                $("#analysisResult").text(textResult);
            }

            processCameraStart = async function () {

                var video = document.querySelector('video');

                function handleError(error) {
                    console.error('navigator.getUserMedia error: ', error);
                    sendImageErrorToBot(error);
                };

                // Fired when camera has been mapped to the video.
                async function handleSuccess(stream) {
                    localMediaStream = stream;
                    video.srcObject = stream;

                    // When finished loading, start processing.
                    video.onloadeddata = async function () {
                        await processImage();
                    }
                }

                navigator.mediaDevices.getUserMedia(constraints)
                    .then(handleSuccess)
                    .catch(handleError);
            };

            // Utility function for turning data URL into blob.
            makeblob = function (dataURL) {
                var BASE64_MARKER = ';base64,';
                if (dataURL.indexOf(BASE64_MARKER) == -1) {
                    var parts = dataURL.split(',');
                    var contentType = parts[0].split(':')[1];
                    var raw = decodeURIComponent(parts[1]);
                    return new Blob([raw], { type: contentType });
                }

                var parts = dataURL.split(BASE64_MARKER);
                var contentType = parts[0].split(':')[1];
                var raw = window.atob(parts[1]);
                var rawLength = raw.length;

                var uInt8Array = new Uint8Array(rawLength);

                for (var i = 0; i < rawLength; ++i) {
                    uInt8Array[i] = raw.charCodeAt(i);
                }

                return new Blob([uInt8Array], { type: contentType });
            };

            processImage = async function () {

                var canvas = document.createElement('canvas');
                var video = document.querySelector('video');

                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                canvas.getContext('2d').drawImage(video, 0, 0);

                var dataUrl = canvas.toDataURL('image/jpeg');

                // Reset web worker to deal with API.
                webWorkerAnalysis = new Worker("js/webWorkerAnalysis.js");
                webWorkerAnalysis.onmessage = handleWebWorkerMessage;
                webWorkerAnalysis.postMessage({ dataBlob: makeblob(dataUrl) });
            };

            await processCameraStart();

        })().catch(err => console.error(err));


</script>