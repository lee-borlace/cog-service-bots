<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>I Spy Bot</title>
    <script src="https://cdn.botframework.com/botframework-webchat/latest/webchat.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <style>
        html, body {
            height: 100%
        }

        body {
            margin: 0
        }

        #webchat,
        #webchat > * {
            height: 100%;
            width: 100%;
        }
    </style>
</head>
<body>

    <video class="videostream" autoplay style="height:50%"></video>

    <img id="sourceImage" style="display:none" />
    <div id="webchat" role="main" style="height:50%"></div>

    <script>

        (async function () {

            const constraints = {
                video: {
                    width: { exact: 640 },
                    height: { exact: 480 }
                }
            };



            // User has selected to play I Spy. Start to access the camera.
            processCameraStart = function () {

                var video = document.querySelector('video');

                function handleError(error) {
                    console.error('navigator.getUserMedia error: ', error);
                    sendImageErrorToBot(error);
                };

                // Fired when camera has been mapped to the video.
                function handleSuccess(stream) {
                    localMediaStream = stream;
                    video.srcObject = stream;

                    // When finished loading, process an image.
                    video.onloadeddata = function () {
                        processImage();
                    }
                }

                navigator.mediaDevices.getUserMedia(constraints)
                    .then(handleSuccess)
                    .catch(handleError);
            };


            // Take a snapshot from the camera and pass it to vision API to extract tags.
            processImage = function () {

                var canvas = document.createElement('canvas');
                var video = document.querySelector('video');

                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                canvas.getContext('2d').drawImage(video, 0, 0);

                var dataUrl = canvas.toDataURL('image/jpeg');

                // Perform the REST API call.
                $.ajax({
                    url: '/api/vision/analyse',
                    processData: false,

                    // Request headers.
                    beforeSend: function (xhrObj) {
                        xhrObj.setRequestHeader("Content-Type", "application/octet-stream");
                    },

                    type: "POST",

                    // Request body.
                    data: makeblob(dataUrl)
                })

                    // Called vision API OK. Post an event to the bot.
                    .done(function (data) {

                        console.log("Vision API analysis finished.");

                        console.log(data);

                        var tags = [];

                        if (data.tags) {
                            tags = data.tags.map(tag => tag);
                        }

                        directLine.postActivity({
                            type: 'event',
                            name: 'imageAnalysed',
                            from: { id: userId },
                            value: tags
                        }).subscribe(function () { });

                    })

                    .fail(function (jqXHR, textStatus, errorThrown) {
                        // Display error message.
                        var errorString = (errorThrown === "") ?
                            "Error. " : errorThrown + " (" + jqXHR.status + "): ";

                        errorString += (jqXHR.responseText === "") ?
                            "" : (jQuery.parseJSON(jqXHR.responseText).message) ?
                                jQuery.parseJSON(jqXHR.responseText).message :
                                jQuery.parseJSON(jqXHR.responseText).error.message;

                        console.log(errorString);

                        sendImageErrorToBot(errorString);

                    });
            };

            // Utility function for turning data URL into blob.
            makeblob = function (dataURL) {
                var BASE64_MARKER = ';base64,';
                if (dataURL.indexOf(BASE64_MARKER) == -1) {
                    var parts = dataURL.split(',');
                    var contentType = parts[0].split(':')[1];
                    var raw = decodeURIComponent(parts[1]);
                    return new Blob([raw], { type: contentType });
                }

                var parts = dataURL.split(BASE64_MARKER);
                var contentType = parts[0].split(':')[1];
                var raw = window.atob(parts[1]);
                var rawLength = raw.length;

                var uInt8Array = new Uint8Array(rawLength);

                for (var i = 0; i < rawLength; ++i) {
                    uInt8Array[i] = raw.charCodeAt(i);
                }

                return new Blob([uInt8Array], { type: contentType });
            };

            sendImageErrorToBot = function (error) {

                directLine.postActivity({
                    type: 'event',
                    name: 'imageError',
                    from: { id: userId },
                    value: error
                }).subscribe(function () { });
            }

            var res = await fetch('/api/directlinetoken', { method: 'POST' });
            var resultObject = await res.json();
            var directLineToken = resultObject.Token;

            var userId = resultObject.UserId;

            res = await fetch('/api/speechtoken', { method: 'POST' });
            resultObject = await res.json();
            region = resultObject.Region;
            var speechToken = resultObject.Token;
            var webSpeechPonyfillFactory = await window.WebChat.createCognitiveServicesSpeechServicesPonyfillFactory({ authorizationToken: speechToken, region: region });


            var directLine = window.WebChat.createDirectLine({ token: directLineToken });

            // For handling back-channel events from the bot.
            const store = window.WebChat.createStore(
                {},
                ({ dispatch }) => next => action => {

                    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {

                        const { activity } = action.payload;

                        if (activity.type === 'event' && activity.name === 'readyForCamera') {
                            processCameraStart();
                        }
                    }

                    return next(action);
                }
            );

            // Set up bot.
            window.WebChat.renderWebChat({
                directLine: directLine,
                webSpeechPonyfillFactory,
                store
            }, document.getElementById('webchat'));

            document.querySelector('#webchat > *').focus();

        })().catch(err => console.error(err));


    </script>
</body>
</html>