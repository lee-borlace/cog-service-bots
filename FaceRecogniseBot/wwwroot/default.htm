<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Face Recogniser Bot</title>
    <script src="/lib/webchat.js"></script>
    <script src="/lib/jquery.min.js"></script>
    <script src="/lib/simple-update-in.production.min.js"></script>
    <style>
        html, body {
            height: 100%
        }

        body {
            margin: 0
        }

        #webchat,
        #webchat > * {
            height: 100%;
            width: 100%;
        }
    </style>
</head>
<body>

    <video class="videostream" autoplay style="height:50%"></video>
    <img id="sourceImage" style="display:none" />
    <div style="height:50%" id="msgInstruction"><h2>Please put your face in front of the camera so I can see you!</h2></div>
    <div id="webchat" role="main" style="height:50%"></div>

    <script>

        (async function () {

            const constraints = {
                video: {
                    width: { exact: 640 },
                    height: { exact: 480 }
                }
            };

            let webWorker;

            handleWebWorkerMessage = async function (event) {
                webWorker.terminate();

                console.log("Face analysis result : " + event.data);

                // Could see someone. Extract ID and name.
                if (event.data && event.data != '') {

                    $("#msgInstruction").hide();
                    $("#webchat").show();

                    var split = event.data.split(';');

                    var newUserId = split[0];

                    // User ID has changed - re-initialise bot.
                    if (newUserId != _userId) {

                        _userId = newUserId;
                        _userName = split[1];

                        await initialiseBotOnce();
                        sendUserChangedEvent();
                    }

                    // If emotion has changed, send an event to the bot.
                    var newEmotion = split[2];

                    if (_emotion != newEmotion && newEmotion && newEmotion != '') {
                        _emotion = newEmotion;
                        sendEmotionChangedEvent();
                    }
                }
                // Couldn't see anyone.
                else {
                    $("#msgInstruction").show();
                    $("#webchat").hide();
                }


                await processImage();
            }

            processCameraStart = async function () {

                var video = document.querySelector('video');

                function handleError(error) {
                    console.error('navigator.getUserMedia error: ', error);
                    sendImageErrorToBot(error);
                };

                // Fired when camera has been mapped to the video.
                async function handleSuccess(stream) {
                    localMediaStream = stream;
                    video.srcObject = stream;

                    // When finished loading, start processing.
                    video.onloadeddata = async function () {

                        await processImage();
                    }
                }

                navigator.mediaDevices.getUserMedia(constraints)
                    .then(handleSuccess)
                    .catch(handleError);
            };


            // Utility function for turning data URL into blob.
            makeblob = function (dataURL) {
                var BASE64_MARKER = ';base64,';
                if (dataURL.indexOf(BASE64_MARKER) == -1) {
                    var parts = dataURL.split(',');
                    var contentType = parts[0].split(':')[1];
                    var raw = decodeURIComponent(parts[1]);
                    return new Blob([raw], { type: contentType });
                }

                var parts = dataURL.split(BASE64_MARKER);
                var contentType = parts[0].split(':')[1];
                var raw = window.atob(parts[1]);
                var rawLength = raw.length;

                var uInt8Array = new Uint8Array(rawLength);

                for (var i = 0; i < rawLength; ++i) {
                    uInt8Array[i] = raw.charCodeAt(i);
                }

                return new Blob([uInt8Array], { type: contentType });
            };

            processImage = async function () {

                var canvas = document.createElement('canvas');
                var video = document.querySelector('video');

                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                canvas.getContext('2d').drawImage(video, 0, 0);

                var dataUrl = canvas.toDataURL('image/jpeg');

                // Reset web worker to deal with API.
                webWorker = new Worker("webWorker.js");
                webWorker.onmessage = handleWebWorkerMessage;
                webWorker.postMessage({ dataBlob: makeblob(dataUrl) });
            };

            sendImageErrorToBot = function (error) {

                _directLine.postActivity({
                    type: 'event',
                    name: 'faceError',
                    from: { id: userId },
                    value: error
                }).subscribe(function () { });
            }

            let _directLine;
            let _userId = '';
            let _userName;
            let _botInitialised = false;
            let _actualUserId = '';
            let _emotion = '';

            initialiseBotOnce = async function () {

                if (!_botInitialised) {

                    _botInitialised = true;

                    var res = await fetch('/api/directlinetoken', { method: 'POST' });
                    var resultObject = await res.json();
                    var directLineToken = resultObject.Token;
                    _actualUserId = resultObject.UserId;

                    _directLine = window.WebChat.createDirectLine({ token: directLineToken });

                    // Set up bot.
                    window.WebChat.renderWebChat({
                        directLine: _directLine,
                        userID: _actualUserId
                    }, document.getElementById('webchat'));

                    document.querySelector('#webchat > *').focus();
                }
            }

            // Send event so bot greets user.
            sendUserChangedEvent = function () {
                _directLine.postActivity({
                    type: 'event',
                    name: 'facesAnalysed',
                    from: { id: _actualUserId },
                    value: _userId + ';' + _userName
                }).subscribe(function () { });
            }

            // Send event to indicate new emtion.
            sendEmotionChangedEvent = function () {
                _directLine.postActivity({
                    type: 'event',
                    name: 'newEmotion',
                    from: { id: _actualUserId },
                    value: _emotion
                }).subscribe(function () { });
            }

            await processCameraStart();



        })().catch(err => console.error(err));


    </script>
</body>
</html>